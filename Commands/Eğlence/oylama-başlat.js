const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');

const alfabeEmojileri = [
  "üá¶", "üáß", "üá®", "üá©", "üá™",
  "üá´", "üá¨", "üá≠", "üáÆ", "üáØ"
];

function parseDuration(durationStr) {
  const match = durationStr.match(/^(\d+)\s*(saniye|dakika|saat|g√ºn)$/i);
  if (!match) return null;

  const value = parseInt(match[1]);
  const unit = match[2].toLowerCase();

  switch (unit) {
    case "g√ºn": return value * 24 * 60 * 60 * 1000;
    case "saat": return value * 60 * 60 * 1000;
    case "dakika": return value * 60 * 1000;
    case "saniye": return value * 1000;
    default: return null;
  }
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName("oylama-ba≈ülat")
    .setDescription("Belirli se√ßeneklerle ve s√ºreyle oylama ba≈ülatƒ±r.")
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .addStringOption(option => option.setName("soru").setDescription("Soru gir.").setRequired(true))
    .addStringOption(option => option.setName("s√ºre").setDescription("S√ºre gir. (5 saniye, 10 dakika, 1 saat, 3 g√ºn)").setRequired(true))
    .addStringOption(o => o.setName("se√ßenek-1").setDescription("Se√ßenek 1").setRequired(true))
    .addStringOption(o => o.setName("se√ßenek-2").setDescription("Se√ßenek 2").setRequired(true))
    .addStringOption(o => o.setName("se√ßenek-3").setDescription("Se√ßenek 3").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-4").setDescription("Se√ßenek 4").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-5").setDescription("Se√ßenek 5").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-6").setDescription("Se√ßenek 6").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-7").setDescription("Se√ßenek 7").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-8").setDescription("Se√ßenek 8").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-9").setDescription("Se√ßenek 9").setRequired(false))
    .addStringOption(o => o.setName("se√ßenek-10").setDescription("Se√ßenek 10").setRequired(false)),

  async execute(interaction) {
    const soru = interaction.options.getString("soru");
    const s√ºreStr = interaction.options.getString("s√ºre");
    const s√ºreMs = parseDuration(s√ºreStr);

    if (!s√ºreMs) {
      return interaction.reply({
        content: "<:carpi_arviis:1046067681515814912> S√ºre formatƒ± ge√ßersiz. **(** `5 saniye`, `10 dakika`, `1 saat`, `3 g√ºn` **)**",
        flags: 64
      });
    }

    const se√ßenekler = [];
    for (let i = 1; i <= 10; i++) {
      const value = interaction.options.getString(`se√ßenek-${i}`);
      if (value) se√ßenekler.push(value);
    }

    if (se√ßenekler.length < 2) {
      return interaction.reply({ content: "<a:dikkat_arviis:997074866371039322> **En az 2 se√ßenek belirtmelisin.**", flags: 64 });
    }

    const emojiSe√ßenekler = se√ßenekler.map((se√ßenek, i) => `${alfabeEmojileri[i]} ${se√ßenek}`);
    const biti≈üZamanƒ± = Math.floor((Date.now() + s√ºreMs) / 1000);

    const embed = new EmbedBuilder()
      .setTitle("Soru")
      .setDescription(`**${soru}** \n\n**Se√ßenekler** \n${emojiSe√ßenekler.join("\n")} \n\n**Ayarlar** \n<a:saat_arviis:1367655591560085535> **S√ºre:** <t:${biti≈üZamanƒ±}:R>`)
      .setColor("Blurple")
      .setThumbnail(interaction.guild.iconURL());

    await interaction.reply({ embeds: [embed] });
    const pollMessage = await interaction.fetchReply();

    for (let i = 0; i < se√ßenekler.length; i++) {
      await pollMessage.react(alfabeEmojileri[i]);
    }

    setTimeout(async () => {
      const fetchedMessage = await pollMessage.fetch();
      const reactions = fetchedMessage.reactions.cache;

      const sonu√ßlar = [];
      const oyVerenlerSet = new Set(); 
      let toplamOy = 0;

      for (let i = 0; i < se√ßenekler.length; i++) {
        const emoji = alfabeEmojileri[i];
        const reaction = reactions.get(emoji);
        const users = reaction ? await reaction.users.fetch() : [];
        const count = reaction ? reaction.count - 1 : 0;

        users.forEach(user => {
          if (!user.bot) oyVerenlerSet.add(user.id);
        });

        sonu√ßlar.push({ emoji, se√ßenek: se√ßenekler[i], oy: count });
        toplamOy += count;
      }

      const sonu√ßMetni = sonu√ßlar
        .map(s => `${s.emoji} ${s.se√ßenek}\n<:alt_arviis:1100191032295047298>> **${s.oy} oy** **(** %${toplamOy > 0 ? ((s.oy / toplamOy) * 100).toFixed(1) : 0} **)**`)
        .join("\n\n");

      const sonu√ßEmbed = EmbedBuilder.from(embed)
        .setDescription(`**${soru}** \n\n**Sonu√ßlar** \n${sonu√ßMetni} \n\nToplamda ·ûµ ·ûµ*${toplamOy} Oy* ·ûµ ·ûµkullanƒ±ldƒ±.`)
        .setColor("Red");

      const butonSatƒ±rƒ± = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("oyverenler")
          .setLabel(`Oy Verenler (${toplamOy})`)
          .setStyle(ButtonStyle.Secondary)
          .setEmoji("<:kullanici_arviis:997610103865888768>")
      );

      await pollMessage.edit({ embeds: [sonu√ßEmbed], components: [butonSatƒ±rƒ±] });

      try {
        await pollMessage.reactions.removeAll();
      } catch (err) {}

      const collector = pollMessage.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 5 * 60 * 1000 
      });

      collector.on("collect", async i => {
        if (i.customId === "oyverenler") {
          const etiketler = [...oyVerenlerSet].map(id => `<@${id}>`).join("\n- ") || "*Hi√ß kimse oy kullanmamƒ±≈ü.*";
          await i.reply({ content: `- ${etiketler}`, flags: 64 });
        }
      });
    }, s√ºreMs);
  }
};
